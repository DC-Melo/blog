TARGET:DAWN → SUNRISE → MORNING → NOON → AFTERNOON → SUNSET → EVENING → NIGHT → @20200602 → ??? ⇒ 
●: ⇒ 
●: ⇒ 
●: ⇒ 
TODO:@20200601 → ??? → @20200531 → ??? → @20200529 → ??? → @20200526 → ??? → @20200518 → ??? → @20200502 → ??? → 
1.make ssh turnel,2.make clear grub. 3.and start cont task, 1 hour connect one time.
learn opencv,learn slam,learn caffe or tensorflow.
mutt -s 12510-23Tue20-20200602 melo.dachor@gmail.com < $dbg/12510-23Tue20-20200602
SUNRISE:
GDB character sets
https://www-zeuthen.desy.de/unix/unixguide/infohtml/gdb/Character-Sets.html
https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_196.html
https://courses.cs.washington.edu/courses/cse451/14wi/sections/debugger.pdf
https://github.com/cgdb/cgdb/issues/23
1、Ubuntu文件结构
　　在ubuntu上硬盘的目录和Windows上不同，Windows可以根据自己的需求分不同的盘符，但ubuntu上只有一个盘，从根目录开始每个目录有针对性的用途。
根目录用“/”表示，根目录下会有不同的目录:
 部分错误望指正修改！
　　bin:
　　系统启动需要的命令和大部分普通用户平常所需的可执行命令。
　　需要注意的是这个文件夹中的文件都是二进制的，权限很高，绝大部分文件普通用户都只有执行权限，无读写权限。
　　只有root账户有读写权限。
　　boot：
　　目录中存放Ubuntu内核文件及引导加载器bootstraploade相关的文件，如果这个目录中的文件被破坏，一般都会出现启动引导异常，无法正常进入系统。
　　root权限才能读写文件。
　　cdrom：
　　光盘目录，如果插入光盘会出现光盘内容（这个已经很少用了，被时代淘汰的功能）
　　dev：
　　设备列表文件夹，设备包括鼠标、键盘、硬盘等。
　　关于设备驱动文件都存放在这个文件夹中，。
　　etc：
　　程序的配置文件目录，
　　比如配置vi编辑器的vimrc就在这个文件下内部，系统不同用户的密码就存放在这个文件夹中。
　　这个文件夹的权限很高，root权限才能编辑修改文件。
　　home：
　　家目录，所有普通用户都有一个以自己名字命名的文件夹存放在这个目录中。
　　普通用户登录ubuntu默认进入的就是家目录中自己的文件夹，可用pwd命令查看，也可用 cd ~ 命令快速跳转到家目录
　　lib：
　　各种程序所需的共享动态链接库，是系统程序能正常运行的支持文件。　　
　　主要存放的都是系统程序共用的代码，提高程序的可读性，节省空间。
　　lib32：
　　系统32位支持库，有的系统是64位，则位lib64位支持库
　　lib64：
　　lib64位支持库，我的是32位的，里面只有一个文件。
　　media：
　　存放所有关于媒体信息的文件。
　　mnt：
　　所有挂载在系统中的设备。比如U盘设备
　　opt：
　　安装程序的引导和程序文件，如果缺少必要的文件，安装的程序无法正常启动，一般多是第三方软件，比如sublime
　　proc：
　　这是process的缩写，表示进程。存放的是系统信息和进程信息。
　　这个目录中存放的文件很重要，记录了系统运行的绝大部分性能信息和各种参数信息。
　　root：
　　这是超级管理员的家目录，超级管理员拥有最高级的权限，能够对系统中的几乎所有文件系统可读可写可执行的操作。
　　run：
　　保存从系统诞生到当前的关于系统信息的文件。
　　sbin：
　　存放系统管理员可执行的命令。
　　里面也是二进制文件。
　　一般不给普通用户执行，除非必要的时候，普通用户获取超级管理员权限可执行部分命令。
　　snap：
　　snap应用框架的程序文件
　　srv：
　　一般是系统存储的服务相关数据。
　　sys：
　　系统中的设备和文件层次结构。文件夹中存储系统信息，用户需要的信息也从中调用。
　　tmp：
　　存放系统或者用户的临时文件的目录。
　　usr：
　　和用户有关的文件系统都存放在这个目录。
　　var：
　　存放类似日志这样随时间变化的文件。
　　initrd.img
　　临时引导系统到内核文件的镜像文件。不能随便删除。
　　分为几个阶段的引导过程，完成磁盘及相关的空间分配整理。
　　vmlinuz：
　　属于一个可压缩的软链接内核。
　　创建内核连接分为两种。
Linux服务器分区的方案
1. Linux服务器分区的方案：
分区类型     分区的实际大小
/           1G-2G (最少要150–250MB)
/boot       32M-100M (启动分区，最多只要100M左右)
/opt        100M-1G (附加应用程序)
/tmp        40M-1000M (最大可以设为1G左右，如果加载ISO镜像文件就设为4G左右吧，一般不用那么多)
/home       2G-10G (每个用户100M左右，具体自定。用户目录。)
/usr        3G-10G 最少要500M左右，一般宽松的服务器要分到4-6G)
/usr/local  3G-15G (自已安装程序安装在此)
/var        >2G–硬盘余下全部空间 ( 最少300M-500M，一般2-3G，做服务器的话把上面余下的空间都分给它)
2. Linux桌面分区方案
分区类型     分区的实际大小
/           1G
/boot       32M
/opt        100M
/tmp        50M
/home       1G-10G
/usr        3G-6G
/usr/local  3G-5G
/var        500M以上
gdb -ex r --args python program_name.py <arguments>
gdb -ex r --args python program_name.py <arguments>
sudo ssh -fCNR 4515:localhost:22 -o ServerAliveInterval=60 root@example.example.xyz
sudo netstat -nap | grep ssh
ssh -p 4515 ubuntu@127.0.0.1
A机公司局域网
B机公网linux主机
C机家里的notebook
A机:
ssh -CfNg -R 5122:localhost:22     用户名@B机
C机:
ssh -CfNg -L 5123:localhost:5122   用户名@B机
C机:
ssh -p 5123 A机用户名@localhost    就可以登录公司的A机了
C机:
ssh -X -p 7000 A机用户名@localhost 就可以执行A机上的图形程序了,比如nautilus .
关闭用户图形界面，使用tty登录。
　　sudo systemctl set-default multi-user.target
　　sudo reboot
开启用户图形界面。
　　sudo systemctl set-default graphical.target
　　sudo reboot
2. 场景一
删除master分支下的所有历史版本与log，只保留当前的版本，并同步至GitHub
2.1. 方法一
先新建一个名为latest_branch的分支，然后将当前master分支中的所有文件添加到latest_branch分支中，接着等待移动完毕后删除master分支，最后把latest_branch这个分支的分支名改为master。
具体实现：
2.1.1. 切换到latest_branch分支下
git checkout --orphan latest_branch
2.1.2. 添加所有文件
git add -A
2.1.3. 提交更改
git commit -am "清除所有历史版本以减少仓库大小，请重新从远程拷贝此仓库"
2.1.4. 删除分支
git branch -D master
2.1.5. 将当前分支重命名
git branch -m master
2.1.6. 最后，强制更新存储库。
git push -f origin master
技巧
将如下代码保存在一个bat文件里，然后双击运行即可。
git checkout --orphan latest_branch
git add -A
git commit -am "清除所有历史版本以减少仓库大小，请重新从远程拷贝此仓库"
git branch -D master
git branch -m master
git push -f origin master
MORNING:
NOON:
AFTERNOON:
SUNSET:
EVENING:
NOTE:
