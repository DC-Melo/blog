TARGET:DAWN → SUNRISE → MORNING → NOON → AFTERNOON → SUNSET → EVENING → NIGHT
●:make slam  ⇒ 
●:make shell adapt for phone ⇒  ✓ DONE
●:bipolar power contrlo debug and commit ⇒ 
TODO:@20200514 → ✓✓? → @20200513 → ??? → @20200512 → ??? → @20200510 → ??? → @20200507 → ??? → @20200429 → ??? → 
mutt -s 12529-20Thu20-20200514 melo.dachor@gmail.com < /Users/dc/2P/006-write/blog/12529-20Thu20-20200514

Thu May 14 08:21:51 CST 2020
	A.坐车去公司
	每天每个时间段都要有输出，具体做什么，要看这个时间做什么的输出比较好。
Thu May 14 11:31:51 CST 2020
    ▣ meeting:
    TODO:jenkins服务器维护
    TODO:自动提交bug问题反馈
Thu May 14 12:16:26 CST 2020
    A.go to lunch
    ▣ read linux slam
Thu May 14 15:53:16 CST 2020


NOTE:
    ▣ 并发;单道程序设计;多道程序设计;进程控制块;进程控制块.
    当道程序:早期dos就是只能一个程序执行完才能执行下一个程序.程序间排队执行
    多道程序设计:通过时钟中断,在不通的程序来回切换轮流执行
    ▣ 环境变量
    ▣ 进程控制原语
    fork function:循环创建子进程
    exec函数族:各个函数的参数和使用方法
    wait;waitpid:回收子进程的一般方式
    ▣ 程序:是指编译好的二进制文件,在磁盘上,不占用系统资源.(cpu,内存,打开的文件,设备,锁) 相当于剧本
    ▣ 进程:需要使用到系统资源,在内存中执行.相当于舞台
    ▣ 并发:并行执行
    ▣ mmu:是在cpu内部的一个硬件.MMU是Memory Management Unit的缩写，中文名是内存管理单元，有时称作分页内存管理单元
    ▣ ./a.out
        内存布局:
        kerrel
        environmeun shell parameter
        stack
        sharelib
        heap
        bss   rw 未初始化区域
        .data  rw
        .rodata ro
        .text ro
    ▣ 进程描述符,进程控制块PCB 本质是结构体 task_struct
        进程id
        进程状态
        进程切换时需要保存和恢复一些cpu的信息
        描述虚拟地址空间信息
        描述控制终端的信息:那个终端运行了程序
        环境变量:$SHELL $TERM,环境变量与命令行参数类似.只是在使用环境变量时,需要引用环境变量表,extern char **environment
        当前工作目录
        umask 保护文件创建修改默认权限的
        文件描述符表:包含很多指向file结构体的指针
        和信号相关的信息
        用户id和组id
        回话session 和进程组 回话相当于组联
        进程可以使用的资源上限, 如:stack,命令: ulimit -a

        最小可行性产品
        核心圈层用户
        用户，场景，需求
        提高客单价与复购率
        万物皆可微商
        万物皆可cps：cost per sale
        万物皆可私域
        万物皆可以私域引流
        吃瓜群众-主力军-KOL（key opinion leader)
        UGC模式：user generate content.
        拉来流量-沉淀流量-运营流量
        用户成长有两大目标：用户利益和产品利益
        用户利益：回报和满足感。物质，精神
        产品利益：日活，存留，用户沉淀，精准运营
        有效流量池：用户获得感
        内容的作用：产品也许不是高频的，但是内容一定是高频的。
        内容消费目标：打发时间，学点东西，参考决策。
        运营需要三个产品：流量产品，利润产品，和形象产品。
        分解目标：量化，实用，节点，积极，规划，挑战。
        时间管理，情绪管理，目标管理，知识管理。
        A/B测试，
    ▣ git 冲突解决
        先 git fetch origin 
        然后git merge origin/master, 和本地分支合并, 之后再push。
        git pull = git fetch + git merge
        git  checkout master 1、首先切换到master分支上
        git pull origin master 2、如果是多人开发的话 需要把远程master上的代码pull下来
        git  merge dev 3、然后我们把dev分支的代码合并到master上
        git status 4、然后查看状态及执行提交命令
            On branch master
            Your branch is ahead of 'origin/master' by 12 commits.
              (use "git push" to publish your local commits)
            nothing to commit, working tree clean
        //上面的意思就是你有12个commit，需要push到远程master上
        最后执行下面提交命令
        git push origin master
        5其他命令
        git remote update origin --prune 更新远程分支列表
        git branch -a 查看所有分支
        git push origin --delete Chapater6 删除远程分支Chapater6
        git branch -d  Chapater6 删除本地分支 Chapater6
    ▣ cmake package
    1.添加Eigen头文件,[ˈaɪgən]adj.本（特）征的；固有的;
        Eigen是一个高层次的C ++库，有效支持线性代数，矩阵和矢量运算，数值分析及其相关的算法
        Eigen通过apt-get安装之后，我们要怎么使用这个依赖库呢？Eigen有一点很奇怪，Eigen库只有头文件，所以我们在CMakeLists.txt中是不需要写target_link_libraries，因为我们是通过apt安装的，所以很容易的知道Eigen库的位置就是在/usr/include/eigen3
        添加头文件
        include_directories("/usr/include/eigen3")
        因为我们已经知道Eigen具体的位置，就不用使用find_package来寻找了，虽然有些粗暴，但是简单有效。
    2.添加Pangolin依赖
        Pangolin的安装也很简单，功能主要就是做三维的可视化显示，主要依赖库是OpenGL，通过apt也很好安装。
        find_package(Pangolin)
        include_directories(${Pangolin_INCLUDE_DIRS})
        add_executable(project_name filename.cpp)
        target_link_libraries(project_name ${Pangolin_LIBRARIES})
    3.添加Sophus依赖
        Sophus实际上是Eigen库的扩展模块，Eigen中虽然有几何模块，但是没有提供李代数的支持，所以Sophus算是一个比较好的李代数库，安装参考之前博文。
        find_package(Sophus REQUIRED)
        include_directories(${Sophus_INCLUDE_DIRS})
        add_executable(project_name project_name.cpp)
        target_link_libraries(project_name ${Sophus_LIBRARIES})
    4.添加OpenCV依赖
        OpenCV经常会出现版本不兼容的问题，LZ同时安装了OpenCV2和OpenCV3两个版本，所以在CMakeLists.txt要指定OpenCV的版本。
        指定OpenCV的版本是3.1
        find_package(OpenCV 3.1 REQUIRED)
        include_directories(${OpenCV_INCLUDE_DIRS})
        add_executable(project_name filename.cpp)
        target_link_libraries(project_name ${OpenCV_LIBS})
        添加OpenCV要注意一个问题，大小写！很重要！大小写！
    5.添加PCL依赖The Point Cloud Library (PCL)
        这个点云库在SLAM应用中还是蛮重要的，通常情况下好像也都有安装，安装很简单，这里还是讲一下CMakeLists.txt中怎么写：
        find_package(PCL REQUIRED COMPONENT common io)
        include_directories(${PCL_INCLUDE_DIRS})
        add_definitions(${PCL_DEFINITIONS})
        target_link_libraries(project_name ${PCL_LIBRARIES})
    6.添加Ceres依赖
        Ceres是Google出品的一个优化库，安装编译都在LZ之前写过一个SLAM安装大全里都有。因为Ceres不是常用的库，所以需要添加一个cmake_modules。LZ这里把对应的cmake_modules文件夹中的文件分享给小伙伴，有需要的可以自行下载。链接: http://pan.baidu.com/s/1o8dTy8i 密码: zmiv
        这行代码就是添加查找Ceres的一个文件
        list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules)
        find_package(Ceres REQUIRED)
        include_directories(${CERES_INCLUDE_DIRS})
        target_link_libraries(project_name ${CERES_LIBRARIES})
    7添加G2O的依赖
        其实这个也是千篇一律，换汤不换药。这里也是要注意几个问题，第一个，要在cmake_module中假如findG2O的文件，链接: http://pan.baidu.com/s/1kVp4Ul5 密码: yeu4，又需要的小伙伴可以自行下载。第二个，注意大小写问题，还有数字0和字母0，这个还是要注意的。
        list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules)
        find_package(G2O REQUIRED)
        include_directories(${G20_INCLUDE_DIRS})
        target_link_libraries(project_name g2o_core g2o_stuff)
    cmake --help-module-list 查看已知cmake库
    find . -iname "*xxx*"
    ▣ git 工作区覆盖
    git 强制覆盖本地工作区的修改，方法如下：
    git fetch --all
    git reset --hard origin/master
    git pull
    在使用Git的过程中，有的时候，我们修改了一些文件，我们也将一些文件做了git add，不过都还没有commit。这时可能突然意识到了有什么问题，想把所有的修改都删除，即回退到什么都该都没有做的状态。可以使用如下两个Git命令：
    git reset .
    git checkout .
    先用reset，将所有已经add到staged状态的文件撤回；
    然后checkout，用git仓库中的文件，来覆盖所有工作区的文件。
    这样，就一切回到最开始了。
    注意，git checkout后，你的一切修改都会丢失。
    git reset HEAD file
    这个命令将某一个文件从staged状态撤回；
    git checkout -- file
    这个命令将某一个文件重新checkout。

    ▣ LinearSolverCSparse
        [bug]CMakeFiles/Makefile2:215: recipe for target 'CMakeFiles/pose_estimation_3d2d.dir/all' failed
        [debug]可能g2o在编译时没有加入CSparse。请安装CSparse库后再编译安装g2o
        https://github.com/gaoxiang12/slambook/pull/85/files#diff-b7faa252ada2bcf8b1f084b2b8287dfe
        从新安装cpsarce
        # Cmake
        $ sudo apt-get install cmake
        # google-glog + gflags
        $ sudo apt-get install libgoogle-glog-dev
        # BLAS & LAPAC
        $ sudo apt-get install libatlas-base-dev
        # Eigen3  已用安装包安装过
        $ sudo apt-get install libeigen3-dev
        # SuiteSparse和CXSparse(可选)
        # - 如果您希望将Ceres构建为*static*库(默认)，则可以在Ubuntu主包repository中使用SuiteSparse包
        #20200220采用了这个命令 后续需要的话再修改
        $ sudo apt-get install libsuitesparse-dev
        # - 但是，如果您要将Ceres构建为* shared *库，则必须添加以下PPA：
        $ sudo add-apt-repository ppa:bzindovic/suitesparse-bugfix-1319687
        $ sudo apt-get update
        $ sudo apt-get install libsuitesparse-dev
Thu May 14 18:55:04 CST 2020

